<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.9.6 on darwin)" generated="20231120 11:08:10.779" rpa="false" schemaversion="4">
<suite id="s1" name="Zhuochuangzhihui" source="/Users/liuyang/work/zhuochuangzhihui">
<suite id="s1-s1" name="Auto" source="/Users/liuyang/work/zhuochuangzhihui/auto">
<suite id="s1-s1-s1" name="Test Running" source="/Users/liuyang/work/zhuochuangzhihui/auto/test_running">
<suite id="s1-s1-s1-s1" name="Dev Err Test" source="/Users/liuyang/work/zhuochuangzhihui/auto/test_running/dev_err_test.robot">
<kw name="Config Best Dev" library="dev_res" type="SETUP">
<kw name="Connect ZH" library="cli_res">
<kw name="Connect SH" library="cli_res">
<kw name="Open Connection" library="SSHLibrary">
<arg>localhost</arg>
<arg>prompt=REGEXP:.*[&gt;#]$</arg>
<arg>port=8222</arg>
<arg>escape_ansi=True</arg>
<arg>term_type=vt100</arg>
<arg>timeout=9s</arg>
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<status status="PASS" starttime="20231120 11:08:11.715" endtime="20231120 11:08:11.716"/>
</kw>
<kw name="Login" library="SSHLibrary">
<arg>root</arg>
<arg>P@ssw0rd</arg>
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<msg timestamp="20231120 11:08:11.716" level="INFO">Logging into 'localhost:8222' as 'root'.</msg>
<msg timestamp="20231120 11:08:11.869" level="INFO">Read output: Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.10.47-linuxkit x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the 'unminimize' command.
Last login: Mon Nov 20 11:07:25 2023 from 172.17.0.1
root@23c71ee8a553:~#</msg>
<status status="PASS" starttime="20231120 11:08:11.716" endtime="20231120 11:08:11.869"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>source ~/.bashrc</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:11.873" level="INFO">source ~/.bashrc</msg>
<status status="PASS" starttime="20231120 11:08:11.869" endtime="20231120 11:08:11.874"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:11.880" level="INFO">root@23c71ee8a553:~#</msg>
<status status="PASS" starttime="20231120 11:08:11.874" endtime="20231120 11:08:11.880"/>
</kw>
<status status="PASS" starttime="20231120 11:08:11.715" endtime="20231120 11:08:11.880"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>zh_cli -d</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.882" level="INFO">zh_cli -d</msg>
<status status="PASS" starttime="20231120 11:08:11.881" endtime="20231120 11:08:11.882"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:11.885" level="INFO">zh_cli -d</msg>
<status status="PASS" starttime="20231120 11:08:11.882" endtime="20231120 11:08:11.885"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:11.889" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.885" endtime="20231120 11:08:11.889"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.890" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:11.890" endtime="20231120 11:08:11.890"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:11.891" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.890" endtime="20231120 11:08:11.891"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:11.892" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.891" endtime="20231120 11:08:11.892"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:11.892" endtime="20231120 11:08:11.892"/>
</return>
<status status="PASS" starttime="20231120 11:08:11.881" endtime="20231120 11:08:11.893"/>
</kw>
<status status="PASS" starttime="20231120 11:08:11.714" endtime="20231120 11:08:11.893"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>device</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.894" level="INFO">device</msg>
<status status="PASS" starttime="20231120 11:08:11.893" endtime="20231120 11:08:11.894"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:11.897" level="INFO">device</msg>
<status status="PASS" starttime="20231120 11:08:11.894" endtime="20231120 11:08:11.897"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:11.898" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.897" endtime="20231120 11:08:11.898"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.899" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:11.899" endtime="20231120 11:08:11.899"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:11.900" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.899" endtime="20231120 11:08:11.900"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:11.901" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.900" endtime="20231120 11:08:11.901"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:11.901" endtime="20231120 11:08:11.901"/>
</return>
<status status="PASS" starttime="20231120 11:08:11.893" endtime="20231120 11:08:11.902"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_set s 1</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.903" level="INFO">add_set s 1</msg>
<status status="PASS" starttime="20231120 11:08:11.902" endtime="20231120 11:08:11.903"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:11.905" level="INFO">add_set s 1</msg>
<status status="PASS" starttime="20231120 11:08:11.903" endtime="20231120 11:08:11.906"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:11.931" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.906" endtime="20231120 11:08:11.931"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.932" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:11.932" endtime="20231120 11:08:11.932"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:11.933" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.933" endtime="20231120 11:08:11.933"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:11.934" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.934" endtime="20231120 11:08:11.934"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:11.934" endtime="20231120 11:08:11.935"/>
</return>
<status status="PASS" starttime="20231120 11:08:11.902" endtime="20231120 11:08:11.935"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_fpc} '-t s' 1 s front_plate_cam</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:11.936" level="INFO">add_device fpc '-t s' 1 s front_plate_cam</msg>
<status status="PASS" starttime="20231120 11:08:11.936" endtime="20231120 11:08:11.937"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:11.940" level="INFO">add_device fpc '-t s' 1 s front_plate_cam</msg>
<status status="PASS" starttime="20231120 11:08:11.937" endtime="20231120 11:08:11.940"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.005" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:11.941" endtime="20231120 11:08:12.006"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.006" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.006" endtime="20231120 11:08:12.006"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.007" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.007" endtime="20231120 11:08:12.007"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.008" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.007" endtime="20231120 11:08:12.008"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.008" endtime="20231120 11:08:12.009"/>
</return>
<status status="PASS" starttime="20231120 11:08:11.935" endtime="20231120 11:08:12.009"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_bpc} '-t s' 1 s back_plate_cam</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.010" level="INFO">add_device bpc '-t s' 1 s back_plate_cam</msg>
<status status="PASS" starttime="20231120 11:08:12.010" endtime="20231120 11:08:12.010"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.013" level="INFO">add_device bpc '-t s' 1 s back_plate_cam</msg>
<status status="PASS" starttime="20231120 11:08:12.011" endtime="20231120 11:08:12.014"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.081" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.014" endtime="20231120 11:08:12.082"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.082" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.082" endtime="20231120 11:08:12.083"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.083" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.083" endtime="20231120 11:08:12.084"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.084" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.084" endtime="20231120 11:08:12.085"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.085" endtime="20231120 11:08:12.085"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.009" endtime="20231120 11:08:12.085"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_fled} '-t s' 1 s front_led</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.086" level="INFO">add_device fl '-t s' 1 s front_led</msg>
<status status="PASS" starttime="20231120 11:08:12.086" endtime="20231120 11:08:12.087"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.090" level="INFO">add_device fl '-t s' 1 s front_led</msg>
<status status="PASS" starttime="20231120 11:08:12.087" endtime="20231120 11:08:12.090"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.162" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.090" endtime="20231120 11:08:12.162"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.163" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.162" endtime="20231120 11:08:12.163"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.163" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.163" endtime="20231120 11:08:12.164"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.164" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.164" endtime="20231120 11:08:12.165"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.165" endtime="20231120 11:08:12.165"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.085" endtime="20231120 11:08:12.165"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_bled} '-t s' 1 s back_led</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.166" level="INFO">add_device bl '-t s' 1 s back_led</msg>
<status status="PASS" starttime="20231120 11:08:12.166" endtime="20231120 11:08:12.167"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.169" level="INFO">add_device bl '-t s' 1 s back_led</msg>
<status status="PASS" starttime="20231120 11:08:12.167" endtime="20231120 11:08:12.170"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.237" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.170" endtime="20231120 11:08:12.238"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.238" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.238" endtime="20231120 11:08:12.238"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.239" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.239" endtime="20231120 11:08:12.239"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.240" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.240" endtime="20231120 11:08:12.240"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.240" endtime="20231120 11:08:12.241"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.166" endtime="20231120 11:08:12.241"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_fid} '-t s' 1 s front_id_reader</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.242" level="INFO">add_device fi '-t s' 1 s front_id_reader</msg>
<status status="PASS" starttime="20231120 11:08:12.241" endtime="20231120 11:08:12.242"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.245" level="INFO">add_device fi '-t s' 1 s front_id_reader</msg>
<status status="PASS" starttime="20231120 11:08:12.242" endtime="20231120 11:08:12.245"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.314" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.245" endtime="20231120 11:08:12.314"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.314" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.314" endtime="20231120 11:08:12.315"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.315" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.315" endtime="20231120 11:08:12.316"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.316" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.316" endtime="20231120 11:08:12.316"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.316" endtime="20231120 11:08:12.317"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.241" endtime="20231120 11:08:12.317"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_bid} '-t s' 1 s back_id_reader</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.318" level="INFO">add_device bi '-t s' 1 s back_id_reader</msg>
<status status="PASS" starttime="20231120 11:08:12.318" endtime="20231120 11:08:12.318"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.321" level="INFO">add_device bi '-t s' 1 s back_id_reader</msg>
<status status="PASS" starttime="20231120 11:08:12.319" endtime="20231120 11:08:12.322"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.390" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.322" endtime="20231120 11:08:12.391"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.391" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.391" endtime="20231120 11:08:12.391"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.392" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.392" endtime="20231120 11:08:12.392"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.393" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.392" endtime="20231120 11:08:12.393"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.394" endtime="20231120 11:08:12.394"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.317" endtime="20231120 11:08:12.394"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_speaker} '-t s' 1 s back_speaker</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.395" level="INFO">add_device fs '-t s' 1 s back_speaker</msg>
<status status="PASS" starttime="20231120 11:08:12.395" endtime="20231120 11:08:12.395"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.398" level="INFO">add_device fs '-t s' 1 s back_speaker</msg>
<status status="PASS" starttime="20231120 11:08:12.396" endtime="20231120 11:08:12.398"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.471" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.399" endtime="20231120 11:08:12.471"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.472" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.471" endtime="20231120 11:08:12.472"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.473" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.472" endtime="20231120 11:08:12.473"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.473" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.473" endtime="20231120 11:08:12.474"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.474" endtime="20231120 11:08:12.474"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.394" endtime="20231120 11:08:12.474"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_fgate} '-t s' 1 s front_gate</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.475" level="INFO">add_device fg '-t s' 1 s front_gate</msg>
<status status="PASS" starttime="20231120 11:08:12.475" endtime="20231120 11:08:12.476"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.479" level="INFO">add_device fg '-t s' 1 s front_gate</msg>
<status status="PASS" starttime="20231120 11:08:12.476" endtime="20231120 11:08:12.479"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.558" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.479" endtime="20231120 11:08:12.558"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.559" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.559" endtime="20231120 11:08:12.559"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.560" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.560" endtime="20231120 11:08:12.560"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.561" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.560" endtime="20231120 11:08:12.561"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.561" endtime="20231120 11:08:12.562"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.475" endtime="20231120 11:08:12.562"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_bgate} '-t s' 1 s back_gate</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.563" level="INFO">add_device bg '-t s' 1 s back_gate</msg>
<status status="PASS" starttime="20231120 11:08:12.562" endtime="20231120 11:08:12.563"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.566" level="INFO">add_device bg '-t s' 1 s back_gate</msg>
<status status="PASS" starttime="20231120 11:08:12.563" endtime="20231120 11:08:12.566"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.637" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.566" endtime="20231120 11:08:12.637"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.638" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.638" endtime="20231120 11:08:12.638"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.639" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.639" endtime="20231120 11:08:12.639"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.640" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.639" endtime="20231120 11:08:12.640"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.640" endtime="20231120 11:08:12.640"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.562" endtime="20231120 11:08:12.641"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_speaker} '-t s' 1 s back_speaker</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.642" level="INFO">add_device fs '-t s' 1 s back_speaker</msg>
<status status="PASS" starttime="20231120 11:08:12.641" endtime="20231120 11:08:12.642"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.645" level="INFO">add_device fs '-t s' 1 s back_speaker</msg>
<status status="PASS" starttime="20231120 11:08:12.642" endtime="20231120 11:08:12.645"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.686" level="INFO">è®¾å¤å·²å­å¨</msg>
<msg timestamp="20231120 11:08:12.686" level="INFO">${output} = è®¾å¤å·²å­å¨
</msg>
<status status="PASS" starttime="20231120 11:08:12.645" endtime="20231120 11:08:12.687"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.687" level="INFO">è®¾å¤å·²å­å¨
</msg>
<status status="PASS" starttime="20231120 11:08:12.687" endtime="20231120 11:08:12.688"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.688" level="INFO">${output} = \xe8\xae\xbe\xe5\xa4\x87\xe5\xb7\xb2\xe5\xad\x98\xe5\x9c\xa8
</msg>
<status status="PASS" starttime="20231120 11:08:12.688" endtime="20231120 11:08:12.688"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.689" level="INFO">${output} = 设备已存在
</msg>
<status status="PASS" starttime="20231120 11:08:12.689" endtime="20231120 11:08:12.689"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.689" endtime="20231120 11:08:12.690"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.641" endtime="20231120 11:08:12.690"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>add_device ${s_s} '-t s' 1 s scale</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.691" level="INFO">add_device ss '-t s' 1 s scale</msg>
<status status="PASS" starttime="20231120 11:08:12.691" endtime="20231120 11:08:12.691"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.694" level="INFO">add_device ss '-t s' 1 s scale</msg>
<status status="PASS" starttime="20231120 11:08:12.692" endtime="20231120 11:08:12.694"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.773" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.695" endtime="20231120 11:08:12.773"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.774" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.774" endtime="20231120 11:08:12.775"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.775" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.775" endtime="20231120 11:08:12.776"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.776" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.776" endtime="20231120 11:08:12.777"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.777" endtime="20231120 11:08:12.777"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.690" endtime="20231120 11:08:12.777"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>zczh</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.779" level="INFO">zczh</msg>
<status status="PASS" starttime="20231120 11:08:12.778" endtime="20231120 11:08:12.779"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.782" level="INFO">zczh</msg>
<status status="PASS" starttime="20231120 11:08:12.780" endtime="20231120 11:08:12.783"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.784" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.783" endtime="20231120 11:08:12.784"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.784" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:12.784" endtime="20231120 11:08:12.785"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.785" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.785" endtime="20231120 11:08:12.786"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.786" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:12.786" endtime="20231120 11:08:12.786"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.787" endtime="20231120 11:08:12.787"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.778" endtime="20231120 11:08:12.787"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>bdr</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.788" level="INFO">bdr</msg>
<status status="PASS" starttime="20231120 11:08:12.788" endtime="20231120 11:08:12.788"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.790" level="INFO">bdr</msg>
<status status="PASS" starttime="20231120 11:08:12.788" endtime="20231120 11:08:12.791"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:12.868" level="INFO">rbac

zczh
device
add_set s 1
add_device 'bg' '-t s' '1' 's' back_gate
add_device 'fg' '-t s' '1' 's' front_gate
add_device 'bi' '-t s' '1' 's' back_id_reader
add_device 'fi' '-t s' '1' 's' front_id_reader
add_device 'bl' '-t s' '1' 's' back_led
add_device 'fl' '-t s' '1' 's' front_led
add_device 'bpc' '-t s' '1' 's' back_plate_cam
add_device 'fpc' '-t s' '1' 's' front_plate_cam
add_device 'fs' '-t s' '1' 's' back_speaker
add_device 'ss' '-t s' '1' 's' scale

zczh</msg>
<msg timestamp="20231120 11:08:12.868" level="INFO">${output} = rbac

zczh
device
add_set s 1
add_device 'bg' '-t s' '1' 's' back_gate
add_device 'fg' '-t s' '1' 's' front_gate
add_device 'bi' '-t s' '1' 's' back_id_reader
add_device 'fi' '-t s' '1' 's' fr...</msg>
<status status="PASS" starttime="20231120 11:08:12.791" endtime="20231120 11:08:12.868"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:12.869" level="INFO">rbac

zczh
device
add_set s 1
add_device 'bg' '-t s' '1' 's' back_gate
add_device 'fg' '-t s' '1' 's' front_gate
add_device 'bi' '-t s' '1' 's' back_id_reader
add_device 'fi' '-t s' '1' 's' front_id_reader
add_device 'bl' '-t s' '1' 's' back_led
add_device 'fl' '-t s' '1' 's' front_led
add_device 'bpc' '-t s' '1' 's' back_plate_cam
add_device 'fpc' '-t s' '1' 's' front_plate_cam
add_device 'fs' '-t s' '1' 's' back_speaker
add_device 'ss' '-t s' '1' 's' scale

zczh
</msg>
<status status="PASS" starttime="20231120 11:08:12.869" endtime="20231120 11:08:12.869"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.870" level="INFO">${output} = rbac

zczh
device
add_set s 1
add_device 'bg' '-t s' '1' 's' back_gate
add_device 'fg' '-t s' '1' 's' front_gate
add_device 'bi' '-t s' '1' 's' back_id_reader
add_device 'fi' '-t s' '1' 's' fr...</msg>
<status status="PASS" starttime="20231120 11:08:12.869" endtime="20231120 11:08:12.870"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:12.870" level="INFO">${output} = rbac

zczh
device
add_set s 1
add_device 'bg' '-t s' '1' 's' back_gate
add_device 'fg' '-t s' '1' 's' front_gate
add_device 'bi' '-t s' '1' 's' back_id_reader
add_device 'fi' '-t s' '1' 's' fr...</msg>
<status status="PASS" starttime="20231120 11:08:12.870" endtime="20231120 11:08:12.871"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:12.871" endtime="20231120 11:08:12.872"/>
</return>
<status status="PASS" starttime="20231120 11:08:12.787" endtime="20231120 11:08:12.872"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>reboot</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:12.876" level="INFO">reboot</msg>
<status status="PASS" starttime="20231120 11:08:12.872" endtime="20231120 11:08:12.876"/>
</kw>
<kw name="DisConnect" library="cli_res">
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" starttime="20231120 11:08:12.877" endtime="20231120 11:08:12.877"/>
</kw>
<status status="PASS" starttime="20231120 11:08:12.876" endtime="20231120 11:08:12.877"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20231120 11:08:17.880" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20231120 11:08:12.878" endtime="20231120 11:08:17.880"/>
</kw>
<status status="PASS" starttime="20231120 11:08:11.714" endtime="20231120 11:08:17.881"/>
</kw>
<test id="s1-s1-s1-s1-t1" name="Kill one of Dev Driver" line="9">
<kw name="Connect SH" library="cli_res">
<kw name="Open Connection" library="SSHLibrary">
<arg>localhost</arg>
<arg>prompt=REGEXP:.*[&gt;#]$</arg>
<arg>port=8222</arg>
<arg>escape_ansi=True</arg>
<arg>term_type=vt100</arg>
<arg>timeout=9s</arg>
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<status status="PASS" starttime="20231120 11:08:17.883" endtime="20231120 11:08:17.884"/>
</kw>
<kw name="Login" library="SSHLibrary">
<arg>root</arg>
<arg>P@ssw0rd</arg>
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<msg timestamp="20231120 11:08:17.885" level="INFO">Logging into 'localhost:8222' as 'root'.</msg>
<msg timestamp="20231120 11:08:18.038" level="INFO">Read output: Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.10.47-linuxkit x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the 'unminimize' command.
Last login: Mon Nov 20 11:08:11 2023 from 172.17.0.1
root@23c71ee8a553:~#</msg>
<status status="PASS" starttime="20231120 11:08:17.885" endtime="20231120 11:08:18.038"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>source ~/.bashrc</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:18.043" level="INFO">source ~/.bashrc</msg>
<status status="PASS" starttime="20231120 11:08:18.039" endtime="20231120 11:08:18.043"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:18.048" level="INFO">root@23c71ee8a553:~#</msg>
<status status="PASS" starttime="20231120 11:08:18.043" endtime="20231120 11:08:18.049"/>
</kw>
<status status="PASS" starttime="20231120 11:08:17.882" endtime="20231120 11:08:18.049"/>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<var>${old_result}</var>
<arg>ps -ef | grep mock_ | grep -v grep | wc -l</arg>
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<msg timestamp="20231120 11:08:18.050" level="INFO">Executing command 'ps -ef | grep mock_ | grep -v grep | wc -l'.</msg>
<msg timestamp="20231120 11:08:18.065" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20231120 11:08:18.066" level="INFO">${old_result} = 10</msg>
<status status="PASS" starttime="20231120 11:08:18.049" endtime="20231120 11:08:18.066"/>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<arg>ps -ef | grep mock_ | grep -v grep | head -n 1 | awk '{print $2}' | xargs kill -9</arg>
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<msg timestamp="20231120 11:08:18.067" level="INFO">Executing command 'ps -ef | grep mock_ | grep -v grep | head -n 1 | awk '{print $2}' | xargs kill -9'.</msg>
<msg timestamp="20231120 11:08:18.083" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20231120 11:08:18.066" endtime="20231120 11:08:18.083"/>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<var>${new_result}</var>
<arg>ps -ef | grep mock_ | grep -v grep | grep -v '\\[mock_' | wc -l</arg>
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<msg timestamp="20231120 11:08:18.084" level="INFO">Executing command 'ps -ef | grep mock_ | grep -v grep | grep -v '\[mock_' | wc -l'.</msg>
<msg timestamp="20231120 11:08:18.099" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20231120 11:08:18.100" level="INFO">${new_result} = 9</msg>
<status status="PASS" starttime="20231120 11:08:18.084" endtime="20231120 11:08:18.100"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${diff}</var>
<arg>${old_result} - ${new_result}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20231120 11:08:18.101" level="INFO">${diff} = 1</msg>
<status status="PASS" starttime="20231120 11:08:18.101" endtime="20231120 11:08:18.101"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${diff}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231120 11:08:18.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231120 11:08:18.102" endtime="20231120 11:08:18.102"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>20s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20231120 11:08:38.104" level="INFO">Slept 20 seconds</msg>
<status status="PASS" starttime="20231120 11:08:18.103" endtime="20231120 11:08:38.105"/>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<var>${new_result}</var>
<arg>ps -ef | grep mock_ | grep -v grep | grep -v '\\[mock_' | wc -l</arg>
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<msg timestamp="20231120 11:08:38.106" level="INFO">Executing command 'ps -ef | grep mock_ | grep -v grep | grep -v '\[mock_' | wc -l'.</msg>
<msg timestamp="20231120 11:08:38.122" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20231120 11:08:38.122" level="INFO">${new_result} = 10</msg>
<status status="PASS" starttime="20231120 11:08:38.105" endtime="20231120 11:08:38.122"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${new_result}</arg>
<arg>${old_result}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20231120 11:08:38.123" endtime="20231120 11:08:38.125"/>
</kw>
<status status="PASS" starttime="20231120 11:08:17.881" endtime="20231120 11:08:38.125"/>
</test>
<kw name="Clear Dev Config" library="dev_res" type="TEARDOWN">
<kw name="Connect ZH" library="cli_res">
<kw name="Connect SH" library="cli_res">
<kw name="Open Connection" library="SSHLibrary">
<arg>localhost</arg>
<arg>prompt=REGEXP:.*[&gt;#]$</arg>
<arg>port=8222</arg>
<arg>escape_ansi=True</arg>
<arg>term_type=vt100</arg>
<arg>timeout=9s</arg>
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<status status="PASS" starttime="20231120 11:08:38.129" endtime="20231120 11:08:38.129"/>
</kw>
<kw name="Login" library="SSHLibrary">
<arg>root</arg>
<arg>P@ssw0rd</arg>
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<msg timestamp="20231120 11:08:38.130" level="INFO">Logging into 'localhost:8222' as 'root'.</msg>
<msg timestamp="20231120 11:08:38.296" level="INFO">Read output: Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.10.47-linuxkit x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the 'unminimize' command.
Last login: Mon Nov 20 11:08:17 2023 from 172.17.0.1
root@23c71ee8a553:~#</msg>
<status status="PASS" starttime="20231120 11:08:38.130" endtime="20231120 11:08:38.297"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>source ~/.bashrc</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:38.301" level="INFO">source ~/.bashrc</msg>
<status status="PASS" starttime="20231120 11:08:38.297" endtime="20231120 11:08:38.301"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:38.307" level="INFO">root@23c71ee8a553:~#</msg>
<status status="PASS" starttime="20231120 11:08:38.302" endtime="20231120 11:08:38.307"/>
</kw>
<status status="PASS" starttime="20231120 11:08:38.128" endtime="20231120 11:08:38.307"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>zh_cli -d</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:38.309" level="INFO">zh_cli -d</msg>
<status status="PASS" starttime="20231120 11:08:38.308" endtime="20231120 11:08:38.309"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:38.312" level="INFO">zh_cli -d</msg>
<status status="PASS" starttime="20231120 11:08:38.309" endtime="20231120 11:08:38.312"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:38.317" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.313" endtime="20231120 11:08:38.317"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:38.317" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:38.317" endtime="20231120 11:08:38.317"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:38.318" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.318" endtime="20231120 11:08:38.318"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:38.319" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.319" endtime="20231120 11:08:38.319"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:38.319" endtime="20231120 11:08:38.320"/>
</return>
<status status="PASS" starttime="20231120 11:08:38.308" endtime="20231120 11:08:38.320"/>
</kw>
<status status="PASS" starttime="20231120 11:08:38.127" endtime="20231120 11:08:38.320"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>device</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:38.321" level="INFO">device</msg>
<status status="PASS" starttime="20231120 11:08:38.321" endtime="20231120 11:08:38.321"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:38.324" level="INFO">device</msg>
<status status="PASS" starttime="20231120 11:08:38.322" endtime="20231120 11:08:38.324"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:38.325" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.324" endtime="20231120 11:08:38.325"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:38.326" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:38.326" endtime="20231120 11:08:38.326"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:38.327" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.326" endtime="20231120 11:08:38.327"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:38.328" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.327" endtime="20231120 11:08:38.328"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:38.328" endtime="20231120 11:08:38.329"/>
</return>
<status status="PASS" starttime="20231120 11:08:38.320" endtime="20231120 11:08:38.329"/>
</kw>
<kw name="Run ZH Cmd" library="cli_res">
<arg>clear_device</arg>
<kw name="Log" library="BuiltIn">
<arg>${cmd}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:38.330" level="INFO">clear_device</msg>
<status status="PASS" starttime="20231120 11:08:38.329" endtime="20231120 11:08:38.330"/>
</kw>
<kw name="Write" library="SSHLibrary">
<arg>${cmd}</arg>
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<msg timestamp="20231120 11:08:38.333" level="INFO">clear_device</msg>
<status status="PASS" starttime="20231120 11:08:38.330" endtime="20231120 11:08:38.333"/>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<var>${output}</var>
<arg>loglevel=INFO</arg>
<arg>strip_prompt=True</arg>
<doc>Consumes and returns the server output until the prompt is found.</doc>
<msg timestamp="20231120 11:08:38.567" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.333" endtime="20231120 11:08:38.567"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 11:08:38.568" level="INFO"/>
<status status="PASS" starttime="20231120 11:08:38.567" endtime="20231120 11:08:38.568"/>
</kw>
<kw name="Encode String To Bytes" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>iso-8859-1</arg>
<doc>Encodes the given Unicode ``string`` to bytes using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:38.568" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.568" endtime="20231120 11:08:38.569"/>
</kw>
<kw name="Decode Bytes To String" library="String">
<var>${output}</var>
<arg>${output}</arg>
<arg>UTF-8</arg>
<doc>Decodes the given ``bytes`` to a Unicode string using the given ``encoding``.</doc>
<msg timestamp="20231120 11:08:38.569" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231120 11:08:38.569" endtime="20231120 11:08:38.570"/>
</kw>
<return>
<value>${output}</value>
<status status="PASS" starttime="20231120 11:08:38.570" endtime="20231120 11:08:38.570"/>
</return>
<status status="PASS" starttime="20231120 11:08:38.329" endtime="20231120 11:08:38.570"/>
</kw>
<kw name="DisConnect" library="cli_res">
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" starttime="20231120 11:08:38.571" endtime="20231120 11:08:38.571"/>
</kw>
<status status="PASS" starttime="20231120 11:08:38.570" endtime="20231120 11:08:38.571"/>
</kw>
<status status="PASS" starttime="20231120 11:08:38.127" endtime="20231120 11:08:38.572"/>
</kw>
<status status="PASS" starttime="20231120 11:08:11.426" endtime="20231120 11:08:38.572"/>
</suite>
<status status="PASS" starttime="20231120 11:08:11.423" endtime="20231120 11:08:38.574"/>
</suite>
<status status="PASS" starttime="20231120 11:08:11.408" endtime="20231120 11:08:38.575"/>
</suite>
<status status="PASS" starttime="20231120 11:08:11.363" endtime="20231120 11:08:38.577"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Zhuochuangzhihui">Zhuochuangzhihui</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Auto">Zhuochuangzhihui.Auto</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1-s1" name="Test Running">Zhuochuangzhihui.Auto.Test Running</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1-s1-s1" name="Dev Err Test">Zhuochuangzhihui.Auto.Test Running.Dev Err Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
